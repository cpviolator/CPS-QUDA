/*
 * Please do not edit this file.
 * It was generated using PAB's VML system.
 */

#ifndef _QPROPW_ARG_H_RPCGEN
#define _QPROPW_ARG_H_RPCGEN

#include <config.h>
#include <util/vml/types.h>
#include <util/vml/vml.h>
#include <util/enum.h>
#include <util/defines.h>
CPS_START_NAMESPACE

enum SourceType {
	POINT = 0,
	VOLUME = 1,
	WALL = 2,
	BOX = 3,
	RANDVOLUME = 4,
	RANDWALL = 5,
	RANDSLAB = 6,
	MESSEQ = 7,
	PROT_U_SEQ = 8,
	PROT_D_SEQ = 9,
	UNDEF = 10,
	DERIV = 11,
	GAUSS_GAUGE_INV = 12,
	EXP = 13,
	SUM_MOM = 14,
	FL_FUNC = 15,
	MOM = 16,
	BOX_4D = 17,
};
typedef enum SourceType SourceType;
extern struct vml_enum_map SourceType_map[];

enum RandomType {
	GAUSS = 0,
	UONE = 1,
	ZTWO = 2,
	//Begin QUDA_CPS
	ZTWOXZTWO = 3,
	//End QUDA_CPS
	NORAND = 4,
};
typedef enum RandomType RandomType;
extern struct vml_enum_map RandomType_map[];

class VML;
class QPropWArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	CgArg cg;
	char *file;
	int x;
	int y;
	int z;
	int t;
	int gauge_fix_src;
	int gauge_fix_snk;
	//Begin QUDA_CPS
	int smeared_src;
	int smeared_snk;
	//End QUDA_CPS
	int store_midprop;
	int save_prop;
	int save_ls_prop;
	int do_half_fermion;
	SourceType SeqSmearSink;
	char *ensemble_label;
	char *ensemble_id;
	int seqNum;
	int StartSrcSpin;
	int EndSrcSpin;
	int StartSrcColor;
	int EndSrcColor;
	   QPropWArg (  ) ;
};

class VML;
class QPropWGFArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	int gauge_fix_src;
};

class VML;
class QPropWPointArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	int x;
	int y;
	int z;
	   QPropWPointArg (  ) ;
};

class VML;
class QPropWBoxArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	int box_start;
	int box_end;
	int use_xyz_offset;
	   QPropWBoxArg (  ) ;
};

class VML;
class QPropW4DBoxArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	int box_start[4];
	int box_size[4];
	Float mom[4];
	   QPropW4DBoxArg (  ) ;
};

class VML;
class QPropWRandArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	RandomType rng;
	int seed;
	   QPropWRandArg (  ) ;
};

class VML;
class QPropWSlabArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	QPropWRandArg rand_arg;
	int slab_width;
	   QPropWSlabArg (  ) ;
};

class VML;
class QPropWExpArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	Float exp_A;
	Float exp_B;
	Float exp_C;
	   QPropWExpArg (  ) ;
};

class VML;
class QPropWGaussArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	int gauss_N;
	Float gauss_W;
	int nt;
	int mt[5];
	GaussianKernelLinkSmearType gauss_link_smear_type;
	int gauss_link_smear_N;
	Float gauss_link_smear_coeff;
	   QPropWGaussArg (  ) ;
};

/* the xdr functions */

#ifdef __cplusplus
extern "C" {
#endif

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t vml_SourceType (VML *, char *instance, SourceType*);
extern  bool_t vml_RandomType (VML *, char *instance, RandomType*);
extern  bool_t vml_QPropWArg (VML *, char *instance, QPropWArg*);
extern  bool_t vml_QPropWGFArg (VML *, char *instance, QPropWGFArg*);
extern  bool_t vml_QPropWPointArg (VML *, char *instance, QPropWPointArg*);
extern  bool_t vml_QPropWBoxArg (VML *, char *instance, QPropWBoxArg*);
extern  bool_t vml_QPropW4DBoxArg (VML *, char *instance, QPropW4DBoxArg*);
extern  bool_t vml_QPropWRandArg (VML *, char *instance, QPropWRandArg*);
extern  bool_t vml_QPropWSlabArg (VML *, char *instance, QPropWSlabArg*);
extern  bool_t vml_QPropWExpArg (VML *, char *instance, QPropWExpArg*);
extern  bool_t vml_QPropWGaussArg (VML *, char *instance, QPropWGaussArg*);

#else /* K&R C */
extern  bool_t vml_SourceType (VML *, char *instance, SourceType*);
extern  bool_t vml_RandomType (VML *, char *instance, RandomType*);
extern  bool_t vml_QPropWArg (VML *, char *instance, QPropWArg*);
extern  bool_t vml_QPropWGFArg (VML *, char *instance, QPropWGFArg*);
extern  bool_t vml_QPropWPointArg (VML *, char *instance, QPropWPointArg*);
extern  bool_t vml_QPropWBoxArg (VML *, char *instance, QPropWBoxArg*);
extern  bool_t vml_QPropW4DBoxArg (VML *, char *instance, QPropW4DBoxArg*);
extern  bool_t vml_QPropWRandArg (VML *, char *instance, QPropWRandArg*);
extern  bool_t vml_QPropWSlabArg (VML *, char *instance, QPropWSlabArg*);
extern  bool_t vml_QPropWExpArg (VML *, char *instance, QPropWExpArg*);
extern  bool_t vml_QPropWGaussArg (VML *, char *instance, QPropWGaussArg*);

#endif /* K&R C */

#ifdef __cplusplus
}
#endif
CPS_END_NAMESPACE

#endif /* !_QPROPW_ARG_H_RPCGEN */
